#nginx整个配置文件说明

user nginx; #指定用户

# work进程启动的数量，通常为cpu处理器的个数
worker_processes 1;  

error_log /var/log/nginx/error.log warn; #错误日志文件目录，设置错误级别未warn

pid 	/var/run/nginx.pid;#设置记录主进程ID的文件

events {
	use epoll;	#设置使用说明连接方法，epoll为linux系统使用的事件模型

    #一个工作进程能够接受的最大并发连接数量
	worker_connections 1024; 
}

http { #http模块设计
	include	/etc/nginx/mime.types;
	default_type application/octet-stream;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  logs/access.log  main;

    sendfile on;	#是否开启文件传输模式
    #tcp_nopush on;

    keepalive_timeout 65;	#长连接超时时间，单位是秒

    #gzip压缩功能设置
    gzip on;

    #设置缓冲
    proxy_buffer_size
    proxy_buffering
    proxy_buffers
    proxy_busy_buffers_size
    

    #设定负载均很后台服务器列表
    #1.backend为自己服务名字
    #2.几台服务器就写几个server，其中配置有ip_hash等几种不同方式
    upstream backend {
    	server 192.168.162.***;
    	server 192.168.162.***;
    	server 192.168.162.***;
    }

    #虚拟主机配置
    server {
    	listen 80;	#监听端口号
    	server_name localhost||www.****.com;  #服务器名

    	charset utf-8;
    	access_log /var/log/nginx/log/host.access_log main;	#

    	# 对根路由 / 做负载均衡+反向代理
    	location / {
    		root /usr/share/nginx/html;
    		index index.html index.htm;

    		proxy_pass http://backend; #代理上面upstream中的backend服务
    		proxy_redirect off;

    		# 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header  Host  $host;
            proxy_set_header  X-Real-IP  $remote_addr;  
            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    	}

    	#静态文件，nginx自己处理，不去backend请求node.js
		location ~* /download/ {
			root /apps/oa/fs;
		}    	

		location /nginx_status {
			stub_status on;
			access_log	off;
			allow 192.168.10.1/24
			deny all;
		}

		location ~ ^/(WEB-INF)/ {
			deny all;
		}

		#error_page 404 /404.html;

		# redirect server error pages to the static page /50x.html
		#
		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
			root /usr/share/nginx/html;
		}
    }

    ##其它虚拟主机，server指令开始

}
#基本配置

#反向代理与负载均衡
#proxy和upstream模块实现nginx负载均衡


#web缓存
#使用proxy模块实现静态文件缓存
#使用ngx_cache_purge实现更强大的缓存清楚功能

# 1.代理服务

# 2.动态缓存

# 3.动静分离

# 4.负载均衡

# 5.nginx与LUA的开发